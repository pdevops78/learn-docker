Docker image = Bare minimum OS + App run time + system packages and dependencies and app code

Bare minimum OS ----> only required packages are available

AMI is a static file
Ec2 instance , if u run AMI ,it can create instance ---> Running version of AMI is called instance
containerization can install in VM's ex: Docker
Docker image: static file
Docker container: running instance of an image is called container
install docker : it will create a group called docker
users who are in docker group or root user can only run docker commands
usermod -aG docker ec2-user: here docker is a group , to add ec2-user in this docker group.

docker images : list down all the images
docker ps: it will show running containers
docker pull nginx:alpine: pull from the docker hub first time
docker create <imageid>:tag, create a container
docker create nginx, it will create a container by using latest tag
docker ps -a , all containers with status
docker start <containerID> , start container
docker status <containerID>
docker ps , all running containers

for all the above steps will do in single line

docker run = docker pull + docker create + docker run
docker stop <containerID>: container running state to exited state
docker ps -a
docker rm <containerID> or docker rm -f <containerID>
to remove single image or container id
docker rm <containerID>
docker rmi <imageID> , rmi is a remove image
to remove all images or container ID
docker rm `docker ps -a -q`
docker rmi `docker images -a -q`
docker run -d nginx , it will pull + create container + run

How can you access docker container from internet?
by enabling the port, we need to open the host port that can redirect traffic to container
docker run -d -p <host-port>:<container port> nginx
ex: docker run -d -p 8000:80 nginx
docker logs "<container ID>"
docker logs -f "<container ID>" , here -f means running
docker inspect imageID or docker inspect containerID
How to get the terminal access of running container?
docker exec -it "containerID" bash,command allows you to open an interactive terminal session inside a running Docker container

Dockerfile ----> it is the declarative of creating custom image.
shell ----> keep all the commands in a file and run it.
Dockerfile -----> keep all the instructions in a file i.e.Dockerfile and build the image.

How to build an image?
docker build -t url/username/image-name:tag . ====> will check for Dockerfile
Dockerfile Instructions:
========================
from: from should be the first instructions to represent base os
FROM image-name:tag
2.run:
======
we will use RUN instructions to install packages and configure them. RUN instruction execute at the time of creation.
RUN  yum install nginx -y
3.CMD:
======
this instruction will run at the time of container creation.
systemctl start backend ----> then only we can access backend application
whatever the instruction you give in  image to run as container , should run
systemctl will not work in containers and images.
docker run -it ------> create container and login inside......
docker run -d -p 8080:80 cmd:1.0, redirect traffic to the container

RUN vs CMD:
=============
RUN -----> executes at build time i.e image creation time
CMD -----> only executes at the time of container creation i.e docker run

ex:
===
FROM   almalinux:9
RUN    dnf install nginx -y
CMD    ["nginx","-g","daemon-off"]

LABEL:
======
1000 white covers , label the covers
to filter which label
docker images --help
docker images -f(filter) label=course=Devops
ex:
===
docker

EXPOSE:
=======
this instruction will let the users know what are the ports used by the image.
ex:
===
FROM            almalinux:9
EXPOSE          80

inspect the we know the port no
docker inspect container id

How can you push the image to the docker hub?
url/username/image-name:tag
you can push images to the docker hub ,nexus,ECR, JFROG, etc...
docker push joindevops/lable:1.0 , here reposiroty name is not correct, so
docker tag label:1.0 joindevops/label:v1.1.0

ENV

COPY: this cmd is used to copy the files from source to destination
ex:
===
FROM                       almalinux:9
RUN                        dnf install nginx -y
RUN                        rm -rf /usr/share/nginx/html/index.html
COPY                       index.html /usr/share/nginx/html/index.html


COPY vs ADD:
============
COPY and ADD both are used to copy the files from workspace to docker image.but ADD cmd have some disadvantages.
It can directly download the content from internet into the image
It can unarchive the files from the image
ex:1
=====
FROM                                 almalinux:9
ADD                                  https://github.com/pdevops78/learn-docker/blob/main/EXPOSE/Dockerfile /tmp/sample.txt
CMD                                  ["sleep","60"]

https://github.com/pdevops78/learn-docker/blob/main/EXPOSE/Dockerfile ---- this is a raw file

ex:2
====

FROM                                       almalinux:9
ADD                                        sample1.tar /tmp/sample
CMD                                        ["sleep","60"]
//before completing 60 seconds we can interact with terminal and check the data is download and extract or not
here in ADD cmd sample1.tar(any tar/zip file) can download from internet and untar the files.

ENRYPOINT:
==========
* CMD instructions can be overriden
ex:
===
FROM                  almalinux:9
CMD                   ["ping","-c5","google.com"]

at run time docker run entrypoint:1.0 yahoo.com, here it will be overriden
* same instruction trying to override with ENTRYPOINT is not working
ex:
===
ex:
===
FROM                  almalinux:9
CMD                   ["ping","-c5","google.com"]
at run time docker run entrypoint:1.0 yahoo.com, here it will not overriden

you can't override ENTRYPOINT , if you try to do it will go append
CMD vs ENTRYPOINT
=================
you can mix CMD and ENTRYPOINT for better results
CMD is used to supply default arguments to ENTRYPOINT, we can always override default args from runtime.
ex:
===
FROM                  almalinux:9
CMD                   ["google.com"]
ENTRYPOINT            ["ping","-c5"]
here there is no destination address google.com is the default arg
we can override at run time also
docker run entrypoint:1.0 yahoo.com

USER:
=====
you should not let the containers running with root access.
FROM       almalinux:9
RUN        adduser expense
USER       expense
CMD        ["sleep","100"]
docker exec -it "<containerid>" bash , interact with terminal and check once whether root user changed as expense user.

WORKDIR:
========
FROM         almalinux:9
RUN          mkdir /app
RUN          cd /app
RUN          pwd
CMD          ["sleep","100"] //here should not move to /app directory,

ex:2
====
FROM         almalinux:9
RUN          mkdir /app
WORKDIR       /app
RUN          pwd
CMD          ["sleep","100"] //here should move to /app directory

ARG:
====
this is the first instruction in only one case . It can be used to supply the version for FROM instructions.
ARG    version
FROM   almalinux:${version}

docker build -t arg:1.0 --build-arg=version=8 .

ex:2
====
you can have args in Dockerfile,you can supply the values through command through option --build-arg
ARG    version
FROM   almalinux:${version}
ARG COURSE
ARG TRAINER
CMD ["sleep","100"]

docker run arg:1.0 --build-arg=version=9 --build-arg=COURSE=DevOps --build-arg=TRAINER=RAGHU
3. you can have default values to arg and override if required
ARG    version
FROM   almalinux:${version:-9}
ARG  COURSE=DevOps
ARG  TRAINER=RAGHU
RUN  echo "${COURSE}"+""+"${TRAINER}"
CMD ["sleep","100"]
here we can override default values to new values

ENV vs ARG:
===========
1. ENV variables can be accessed both at the time of build or image and containers.
2. ARG instruction can only be accessed at the time of build or image.

How can i access arg inside the container?
ARG    version
FROM   almalinux:${version:-9}
ARG  COURSE=DevOps
ARG  TRAINER=RAGHU
ENV  COURSE = ${COURSE}
RUN  echo "${COURSE},${TRAINER}"
CMD ["sleep","100"]
// check in terminal

ONBUILD:
========
this is useful as a tigger , if someone is trying to use your image . you can force them to keep some files in their workspace or configuration
Dockerfile

FROM          almalinux:9
RUN           dnf install nginx -y
RUN           rm -rf /usr/share/nginx/html/index.html
ONBUILD COPY  index.html /usr/share/nginx/html/index.html
CMD            ["nginx","-g","daemon off;"]

create a test folder under ONBUILD
test----> Dockerfile
FROM               onbuild:v1.0 //tagname

test----->index.html
<h1> this is onbuild image</h1>

here child image can be created from parent FROM, then ONBUILD is triggered and COPY cmd will work
child image provides the index.html  and copies to the destination file.


Mysql:
=====
FROM mysql:8.0
ENV MYSQL_ROOT_PASSWORD=ExpenseApp@1
    MYSQL_USER=expense
    MYSQL_PASSWORD=ExpenseApp@1
    MYSQL_DATABASE=transactions
COPY schema.sql /docker-entrypoint-initdb.d

here mysql itself start the process automatically in the background


Expense Project:
================
mysql
backend
frontend

docker using the network as bridge network. to create network
* docker network
* docker  network create expense
* docker network is a bridge network , these network connect to mysql , backend containers
* if containers connect to host network, will get a problem, so docker network is best

how to send containers to newly created containers?
docker run -d -p 8080:8080 --name backend/mysql/frontend --network expense backend/mysql/frontend:v1.0
here --name backend is a container host name

in backend container , install mysql
apt update
apt install default mysql-client -y
cat /etc/*release, to know about OS


need to know troubleshoot:
===========================











